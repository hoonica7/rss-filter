name: Filter RSS Feed everyday + Email everyday morning + Email when error

on:
  schedule:
    # 오전 8시 CDT = 13:00 UTC + 17분
    # 8AM Texas (CDT) = 13:00 UTC + 17 min
    - cron: '17 13 * * *'
    # 오후 7시 CDT = 00:00 UTC (다음 날 자정이지만 cron은 그대로 * * *) + 17분
    # 7PM Texas (CDT) = 00:00 UTC (technically next day midnight, but cron remains the same) + 17 min
    - cron: '17 0 * * *'
  workflow_dispatch:
  
jobs:
  filter-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ➡️ last_failed_journal.txt 캐시 복원
      # Restore cache for last_failed_journal.txt using a fixed key
      - name: Restore last failed journal state
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: last_failed_journal.txt
          key: ${{ runner.os }}-last-failed-journal-v1
          restore-keys: |
            ${{ runner.os }}-last-failed-journal-

      - name: Set up Python with caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python script to filter RSS and create files
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          # 🚨 GitHub Actions 실행 링크 환경 변수 추가
          # Add GitHub Actions run URL to environment variables
          GITHUB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          python filter_rss_v4.py
      
      - name: Upload artifacts for next steps
        uses: actions/upload-artifact@v4
        with:
          name: filtered-files
          path: |
            filtered_titles.txt
            filtered_feed_*.xml
      
      # ➡️ last_failed_journal.txt 캐시 저장
      # Save the cache with a unique key based on run_id to avoid conflicts
      - name: Cache last_failed_journal state
        uses: actions/cache/save@v4
        if: always()
        with:
          path: last_failed_journal.txt
          key: ${{ runner.os }}-last-failed-journal-v1-${{ github.run_id }}

      - name: Deploy to GitHub Pages
        if: success() # 성공했을 때만 배포
        # Deploy only if the workflow succeeded
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          publish_branch: gh-pages

      - name: Download artifacts
        if: success()
        uses: actions/download-artifact@v4
        with:
          name: filtered-files

      - name: Get UTC hour
        id: get_hour
        run: echo "hour=$(date -u +%H)" >> $GITHUB_OUTPUT

      - name: Send email with results
        # 매일 아침 실행때마다 이메일을 발송합니다.
        # Send email everyday morning.
        if: success() && steps.get_hour.outputs.hour > '10'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '[hoonica RSS] New Paper Updates'
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          body: file://filtered_titles.txt

  # 오류 발생 시 즉시 이메일 알림을 위한 별도 Job
  # Separate job to send email notification immediately on failure
  failure-notification:
    runs-on: ubuntu-latest
    needs: filter-and-deploy
    if: ${{ always() && needs.filter-and-deploy.result == 'failure' }}

    steps:
      - name: Download error log artifact
        uses: actions/download-artifact@v4
        with:
          name: filtered-files

      - name: Send email with error report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '[NatSci RSS] Action Failed!'
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          body: file://filtered_titles.txt
